namespace Godot;

using System;
using System.ComponentModel;
using System.Diagnostics;
using Godot.NativeInterop;

#nullable disable
/// <summary>
/// <para>Custom code to generate previews. Please check <c>file_dialog/thumbnail_size</c> in <see cref="Godot.EditorSettings"/> to find out the right size to do previews at.</para>
/// </summary>
public partial class EditorResourcePreviewGenerator : RefCounted
{
    private static readonly System.Type CachedType = typeof(EditorResourcePreviewGenerator);

    private static readonly StringName NativeName = "EditorResourcePreviewGenerator";

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly unsafe delegate* unmanaged<IntPtr> NativeCtor = ClassDB_get_constructor(NativeName);

    public EditorResourcePreviewGenerator() : this(true)
    {
        unsafe
        {
            ConstructAndInitialize(NativeCtor, NativeName, CachedType, refCounted: true);
        }
    }

    internal EditorResourcePreviewGenerator(bool memoryOwn) : base(memoryOwn) { }

    /// <summary>
    /// <para>If this function returns <see langword="true"/>, the generator will call <see cref="Godot.EditorResourcePreviewGenerator._Generate(Resource, Vector2I, Godot.Collections.Dictionary)"/> or <see cref="Godot.EditorResourcePreviewGenerator._GenerateFromPath(string, Vector2I, Godot.Collections.Dictionary)"/> for small previews as well.</para>
    /// <para>By default, it returns <see langword="false"/>.</para>
    /// </summary>
    public virtual bool _CanGenerateSmallPreview()
    {
        return default;
    }

    /// <summary>
    /// <para>Generate a preview from a given resource with the specified size. This must always be implemented.</para>
    /// <para>Returning an empty texture is an OK way to fail and let another generator take care.</para>
    /// <para>Care must be taken because this function is always called from a thread (not the main thread).</para>
    /// <para><paramref name="metadata"/> dictionary can be modified to store file-specific metadata that can be used in <see cref="Godot.EditorResourceTooltipPlugin._MakeTooltipForPath(string, Godot.Collections.Dictionary, Control)"/> (like image size, sample length etc.).</para>
    /// </summary>
    public virtual unsafe Texture2D _Generate(Resource resource, Vector2I size, Godot.Collections.Dictionary metadata)
    {
        return default;
    }

    /// <summary>
    /// <para>Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call <see cref="Godot.EditorResourcePreviewGenerator._Generate(Resource, Vector2I, Godot.Collections.Dictionary)"/>.</para>
    /// <para>Returning an empty texture is an OK way to fail and let another generator take care.</para>
    /// <para>Care must be taken because this function is always called from a thread (not the main thread).</para>
    /// <para><paramref name="metadata"/> dictionary can be modified to store file-specific metadata that can be used in <see cref="Godot.EditorResourceTooltipPlugin._MakeTooltipForPath(string, Godot.Collections.Dictionary, Control)"/> (like image size, sample length etc.).</para>
    /// </summary>
    public virtual unsafe Texture2D _GenerateFromPath(string path, Vector2I size, Godot.Collections.Dictionary metadata)
    {
        return default;
    }

    /// <summary>
    /// <para>If this function returns <see langword="true"/>, the generator will automatically generate the small previews from the normal preview texture generated by the methods <see cref="Godot.EditorResourcePreviewGenerator._Generate(Resource, Vector2I, Godot.Collections.Dictionary)"/> or <see cref="Godot.EditorResourcePreviewGenerator._GenerateFromPath(string, Vector2I, Godot.Collections.Dictionary)"/>.</para>
    /// <para>By default, it returns <see langword="false"/>.</para>
    /// </summary>
    public virtual bool _GenerateSmallPreviewAutomatically()
    {
        return default;
    }

    /// <summary>
    /// <para>Returns <see langword="true"/> if your generator supports the resource of type <paramref name="type"/>.</para>
    /// </summary>
    public virtual bool _Handles(string type)
    {
        return default;
    }

    // ReSharper disable once InconsistentNaming
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly StringName MethodProxyName__can_generate_small_preview = "_CanGenerateSmallPreview";

    // ReSharper disable once InconsistentNaming
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly StringName MethodProxyName__generate = "_Generate";

    // ReSharper disable once InconsistentNaming
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly StringName MethodProxyName__generate_from_path = "_GenerateFromPath";

    // ReSharper disable once InconsistentNaming
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly StringName MethodProxyName__generate_small_preview_automatically = "_GenerateSmallPreviewAutomatically";

    // ReSharper disable once InconsistentNaming
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly StringName MethodProxyName__handles = "_Handles";

    /// <summary>
    /// Invokes the method with the given name, using the given arguments.
    /// This method is used by Godot to invoke methods from the engine side.
    /// Do not call or override this method.
    /// </summary>
    /// <param name="method">Name of the method to invoke.</param>
    /// <param name="args">Arguments to use with the invoked method.</param>
    /// <param name="ret">Value returned by the invoked method.</param>
#pragma warning disable CS0618 // Member is obsolete
    protected internal override bool InvokeGodotClassMethod(in godot_string_name method, NativeVariantPtrArgs args, out godot_variant ret)
    {
        if ((method == MethodProxyName__can_generate_small_preview || method == MethodName._CanGenerateSmallPreview) && args.Count == 0 && HasGodotClassMethod((godot_string_name)MethodProxyName__can_generate_small_preview.NativeValue))
        {
            var callRet = _CanGenerateSmallPreview();
            ret = VariantUtils.CreateFrom<bool>(callRet);
            return true;
        }
        if ((method == MethodProxyName__generate || method == MethodName._Generate) && args.Count == 3 && HasGodotClassMethod((godot_string_name)MethodProxyName__generate.NativeValue))
        {
            var callRet = _Generate(VariantUtils.ConvertTo<Resource>(args[0]), VariantUtils.ConvertTo<Vector2I>(args[1]), VariantUtils.ConvertTo<Godot.Collections.Dictionary>(args[2]));
            ret = VariantUtils.CreateFrom<Texture2D>(callRet);
            return true;
        }
        if ((method == MethodProxyName__generate_from_path || method == MethodName._GenerateFromPath) && args.Count == 3 && HasGodotClassMethod((godot_string_name)MethodProxyName__generate_from_path.NativeValue))
        {
            var callRet = _GenerateFromPath(VariantUtils.ConvertTo<string>(args[0]), VariantUtils.ConvertTo<Vector2I>(args[1]), VariantUtils.ConvertTo<Godot.Collections.Dictionary>(args[2]));
            ret = VariantUtils.CreateFrom<Texture2D>(callRet);
            return true;
        }
        if ((method == MethodProxyName__generate_small_preview_automatically || method == MethodName._GenerateSmallPreviewAutomatically) && args.Count == 0 && HasGodotClassMethod((godot_string_name)MethodProxyName__generate_small_preview_automatically.NativeValue))
        {
            var callRet = _GenerateSmallPreviewAutomatically();
            ret = VariantUtils.CreateFrom<bool>(callRet);
            return true;
        }
        if ((method == MethodProxyName__handles || method == MethodName._Handles) && args.Count == 1 && HasGodotClassMethod((godot_string_name)MethodProxyName__handles.NativeValue))
        {
            var callRet = _Handles(VariantUtils.ConvertTo<string>(args[0]));
            ret = VariantUtils.CreateFrom<bool>(callRet);
            return true;
        }
        return base.InvokeGodotClassMethod(method, args, out ret);
    }
#pragma warning restore CS0618

    /// <summary>
    /// Check if the type contains a method with the given name.
    /// This method is used by Godot to check if a method exists before invoking it.
    /// Do not call or override this method.
    /// </summary>
    /// <param name="method">Name of the method to check for.</param>

    protected internal override bool HasGodotClassMethod(in godot_string_name method)
    {
        if (method == MethodName._CanGenerateSmallPreview)
        {
            if (HasGodotClassMethod(MethodProxyName__can_generate_small_preview.NativeValue.DangerousSelfRef))
            {
                return true;
            }
        }
        if (method == MethodName._Generate)
        {
            if (HasGodotClassMethod(MethodProxyName__generate.NativeValue.DangerousSelfRef))
            {
                return true;
            }
        }
        if (method == MethodName._GenerateFromPath)
        {
            if (HasGodotClassMethod(MethodProxyName__generate_from_path.NativeValue.DangerousSelfRef))
            {
                return true;
            }
        }
        if (method == MethodName._GenerateSmallPreviewAutomatically)
        {
            if (HasGodotClassMethod(MethodProxyName__generate_small_preview_automatically.NativeValue.DangerousSelfRef))
            {
                return true;
            }
        }
        if (method == MethodName._Handles)
        {
            if (HasGodotClassMethod(MethodProxyName__handles.NativeValue.DangerousSelfRef))
            {
                return true;
            }
        }
        return base.HasGodotClassMethod(method);
    }

    /// <summary>
    /// Check if the type contains a signal with the given name.
    /// This method is used by Godot to check if a signal exists before raising it.
    /// Do not call or override this method.
    /// </summary>
    /// <param name="signal">Name of the signal to check for.</param>

    protected internal override bool HasGodotClassSignal(in godot_string_name signal)
    {
        return base.HasGodotClassSignal(signal);
    }

    /// <summary>
    /// Cached StringNames for the properties and fields contained in this class, for fast lookup.
    /// </summary>
    public new class PropertyName : RefCounted.PropertyName
    {
    }

    /// <summary>
    /// Cached StringNames for the methods contained in this class, for fast lookup.
    /// </summary>
    public new class MethodName : RefCounted.MethodName
    {
        /// <summary>
        /// Cached name for the '_can_generate_small_preview' method.
        /// </summary>
        public static readonly StringName _CanGenerateSmallPreview = "_can_generate_small_preview";
        /// <summary>
        /// Cached name for the '_generate' method.
        /// </summary>
        public static readonly StringName _Generate = "_generate";
        /// <summary>
        /// Cached name for the '_generate_from_path' method.
        /// </summary>
        public static readonly StringName _GenerateFromPath = "_generate_from_path";
        /// <summary>
        /// Cached name for the '_generate_small_preview_automatically' method.
        /// </summary>
        public static readonly StringName _GenerateSmallPreviewAutomatically = "_generate_small_preview_automatically";
        /// <summary>
        /// Cached name for the '_handles' method.
        /// </summary>
        public static readonly StringName _Handles = "_handles";
    }

    /// <summary>
    /// Cached StringNames for the signals contained in this class, for fast lookup.
    /// </summary>
    public new class SignalName : RefCounted.SignalName
    {
    }
}
