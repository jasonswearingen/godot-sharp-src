namespace Godot;

using System;
using System.ComponentModel;
using System.Diagnostics;
using Godot.NativeInterop;

#nullable disable
/// <summary>
/// <para><see cref="Godot.LightmapGIData"/> contains baked lightmap and dynamic object probe data for <see cref="Godot.LightmapGI"/>. It is replaced every time lightmaps are baked in <see cref="Godot.LightmapGI"/>.</para>
/// </summary>
public partial class LightmapGIData : Resource
{
    /// <summary>
    /// <para>The lightmap atlas textures generated by the lightmapper.</para>
    /// </summary>
    public Godot.Collections.Array<TextureLayered> LightmapTextures
    {
        get
        {
            return GetLightmapTextures();
        }
        set
        {
            SetLightmapTextures(value);
        }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public bool UsesSphericalHarmonics
    {
        get
        {
            return IsUsingSphericalHarmonics();
        }
        set
        {
            SetUsesSphericalHarmonics(value);
        }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public Godot.Collections.Array UserData
    {
        get
        {
            return _GetUserData();
        }
        set
        {
            _SetUserData(value);
        }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public Godot.Collections.Dictionary ProbeData
    {
        get
        {
            return _GetProbeData();
        }
        set
        {
            _SetProbeData(value);
        }
    }

    /// <summary>
    /// <para>The lightmap atlas texture generated by the lightmapper.</para>
    /// </summary>
    [Obsolete("The lightmap atlas can now contain multiple textures. See 'Godot.LightmapGIData.LightmapTextures'.")]
    public TextureLayered LightTexture
    {
        get
        {
            return GetLightTexture();
        }
        set
        {
            SetLightTexture(value);
        }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public Godot.Collections.Array LightTextures
    {
        get
        {
            return _GetLightTexturesData();
        }
        set
        {
            _SetLightTexturesData(value);
        }
    }

    private static readonly System.Type CachedType = typeof(LightmapGIData);

    private static readonly StringName NativeName = "LightmapGIData";

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly unsafe delegate* unmanaged<IntPtr> NativeCtor = ClassDB_get_constructor(NativeName);

    public LightmapGIData() : this(true)
    {
        unsafe
        {
            ConstructAndInitialize(NativeCtor, NativeName, CachedType, refCounted: true);
        }
    }

    internal LightmapGIData(bool memoryOwn) : base(memoryOwn) { }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind0 = ClassDB_get_method_with_compatibility(NativeName, MethodName._SetUserData, 381264803ul);

    internal void _SetUserData(Godot.Collections.Array data)
    {
        NativeCalls.godot_icall_1_130(MethodBind0, GodotObject.GetPtr(this), (godot_array)(data ?? new()).NativeValue);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind1 = ClassDB_get_method_with_compatibility(NativeName, MethodName._GetUserData, 3995934104ul);

    internal Godot.Collections.Array _GetUserData()
    {
        return NativeCalls.godot_icall_0_112(MethodBind1, GodotObject.GetPtr(this));
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind2 = ClassDB_get_method_with_compatibility(NativeName, MethodName.SetLightmapTextures, 381264803ul);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public void SetLightmapTextures(Godot.Collections.Array<TextureLayered> lightTextures)
    {
        NativeCalls.godot_icall_1_130(MethodBind2, GodotObject.GetPtr(this), (godot_array)(lightTextures ?? new()).NativeValue);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind3 = ClassDB_get_method_with_compatibility(NativeName, MethodName.GetLightmapTextures, 3995934104ul);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public Godot.Collections.Array<TextureLayered> GetLightmapTextures()
    {
        return new Godot.Collections.Array<TextureLayered>(NativeCalls.godot_icall_0_112(MethodBind3, GodotObject.GetPtr(this)));
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind4 = ClassDB_get_method_with_compatibility(NativeName, MethodName.SetUsesSphericalHarmonics, 2586408642ul);

    /// <summary>
    /// <para>If <paramref name="usesSphericalHarmonics"/> is <see langword="true"/>, tells the engine to treat the lightmap data as if it was baked with directional information.</para>
    /// <para><b>Note:</b> Changing this value on already baked lightmaps will not cause them to be baked again. This means the material appearance will look incorrect until lightmaps are baked again, in which case the value set here is discarded as the entire <see cref="Godot.LightmapGIData"/> resource is replaced by the lightmapper.</para>
    /// </summary>
    public void SetUsesSphericalHarmonics(bool usesSphericalHarmonics)
    {
        NativeCalls.godot_icall_1_41(MethodBind4, GodotObject.GetPtr(this), usesSphericalHarmonics.ToGodotBool());
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind5 = ClassDB_get_method_with_compatibility(NativeName, MethodName.IsUsingSphericalHarmonics, 36873697ul);

    /// <summary>
    /// <para>If <see langword="true"/>, lightmaps were baked with directional information. See also <see cref="Godot.LightmapGI.Directional"/>.</para>
    /// </summary>
    public bool IsUsingSphericalHarmonics()
    {
        return NativeCalls.godot_icall_0_40(MethodBind5, GodotObject.GetPtr(this)).ToBool();
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind6 = ClassDB_get_method_with_compatibility(NativeName, MethodName.AddUser, 4272570515ul);

    /// <summary>
    /// <para>Adds an object that is considered baked within this <see cref="Godot.LightmapGIData"/>.</para>
    /// </summary>
    public unsafe void AddUser(NodePath path, Rect2 uVScale, int sliceIndex, int subInstance)
    {
        NativeCalls.godot_icall_4_665(MethodBind6, GodotObject.GetPtr(this), (godot_node_path)(path?.NativeValue ?? default), &uVScale, sliceIndex, subInstance);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind7 = ClassDB_get_method_with_compatibility(NativeName, MethodName.GetUserCount, 3905245786ul);

    /// <summary>
    /// <para>Returns the number of objects that are considered baked within this <see cref="Godot.LightmapGIData"/>.</para>
    /// </summary>
    public int GetUserCount()
    {
        return NativeCalls.godot_icall_0_37(MethodBind7, GodotObject.GetPtr(this));
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind8 = ClassDB_get_method_with_compatibility(NativeName, MethodName.GetUserPath, 408788394ul);

    /// <summary>
    /// <para>Returns the <see cref="Godot.NodePath"/> of the baked object at index <paramref name="userIdx"/>.</para>
    /// </summary>
    public NodePath GetUserPath(int userIdx)
    {
        return NativeCalls.godot_icall_1_70(MethodBind8, GodotObject.GetPtr(this), userIdx);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind9 = ClassDB_get_method_with_compatibility(NativeName, MethodName.ClearUsers, 3218959716ul);

    /// <summary>
    /// <para>Clear all objects that are considered baked within this <see cref="Godot.LightmapGIData"/>.</para>
    /// </summary>
    public void ClearUsers()
    {
        NativeCalls.godot_icall_0_3(MethodBind9, GodotObject.GetPtr(this));
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind10 = ClassDB_get_method_with_compatibility(NativeName, MethodName._SetProbeData, 4155329257ul);

    internal void _SetProbeData(Godot.Collections.Dictionary data)
    {
        NativeCalls.godot_icall_1_113(MethodBind10, GodotObject.GetPtr(this), (godot_dictionary)(data ?? new()).NativeValue);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind11 = ClassDB_get_method_with_compatibility(NativeName, MethodName._GetProbeData, 3102165223ul);

    internal Godot.Collections.Dictionary _GetProbeData()
    {
        return NativeCalls.godot_icall_0_114(MethodBind11, GodotObject.GetPtr(this));
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind12 = ClassDB_get_method_with_compatibility(NativeName, MethodName.SetLightTexture, 1278366092ul);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public void SetLightTexture(TextureLayered lightTexture)
    {
        NativeCalls.godot_icall_1_55(MethodBind12, GodotObject.GetPtr(this), GodotObject.GetPtr(lightTexture));
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind13 = ClassDB_get_method_with_compatibility(NativeName, MethodName.GetLightTexture, 3984243839ul);

    [EditorBrowsable(EditorBrowsableState.Never)]
    public TextureLayered GetLightTexture()
    {
        return (TextureLayered)NativeCalls.godot_icall_0_58(MethodBind13, GodotObject.GetPtr(this));
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind14 = ClassDB_get_method_with_compatibility(NativeName, MethodName._SetLightTexturesData, 381264803ul);

    internal void _SetLightTexturesData(Godot.Collections.Array data)
    {
        NativeCalls.godot_icall_1_130(MethodBind14, GodotObject.GetPtr(this), (godot_array)(data ?? new()).NativeValue);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static readonly IntPtr MethodBind15 = ClassDB_get_method_with_compatibility(NativeName, MethodName._GetLightTexturesData, 3995934104ul);

    internal Godot.Collections.Array _GetLightTexturesData()
    {
        return NativeCalls.godot_icall_0_112(MethodBind15, GodotObject.GetPtr(this));
    }

    /// <summary>
    /// Invokes the method with the given name, using the given arguments.
    /// This method is used by Godot to invoke methods from the engine side.
    /// Do not call or override this method.
    /// </summary>
    /// <param name="method">Name of the method to invoke.</param>
    /// <param name="args">Arguments to use with the invoked method.</param>
    /// <param name="ret">Value returned by the invoked method.</param>
#pragma warning disable CS0618 // Member is obsolete
    protected internal override bool InvokeGodotClassMethod(in godot_string_name method, NativeVariantPtrArgs args, out godot_variant ret)
    {
        return base.InvokeGodotClassMethod(method, args, out ret);
    }
#pragma warning restore CS0618

    /// <summary>
    /// Check if the type contains a method with the given name.
    /// This method is used by Godot to check if a method exists before invoking it.
    /// Do not call or override this method.
    /// </summary>
    /// <param name="method">Name of the method to check for.</param>

    protected internal override bool HasGodotClassMethod(in godot_string_name method)
    {
        return base.HasGodotClassMethod(method);
    }

    /// <summary>
    /// Check if the type contains a signal with the given name.
    /// This method is used by Godot to check if a signal exists before raising it.
    /// Do not call or override this method.
    /// </summary>
    /// <param name="signal">Name of the signal to check for.</param>

    protected internal override bool HasGodotClassSignal(in godot_string_name signal)
    {
        return base.HasGodotClassSignal(signal);
    }

    /// <summary>
    /// Cached StringNames for the properties and fields contained in this class, for fast lookup.
    /// </summary>
    public new class PropertyName : Resource.PropertyName
    {
        /// <summary>
        /// Cached name for the 'lightmap_textures' property.
        /// </summary>
        public static readonly StringName LightmapTextures = "lightmap_textures";
        /// <summary>
        /// Cached name for the 'uses_spherical_harmonics' property.
        /// </summary>
        public static readonly StringName UsesSphericalHarmonics = "uses_spherical_harmonics";
        /// <summary>
        /// Cached name for the 'user_data' property.
        /// </summary>
        public static readonly StringName UserData = "user_data";
        /// <summary>
        /// Cached name for the 'probe_data' property.
        /// </summary>
        public static readonly StringName ProbeData = "probe_data";
        /// <summary>
        /// Cached name for the 'light_texture' property.
        /// </summary>
        public static readonly StringName LightTexture = "light_texture";
        /// <summary>
        /// Cached name for the 'light_textures' property.
        /// </summary>
        public static readonly StringName LightTextures = "light_textures";
    }

    /// <summary>
    /// Cached StringNames for the methods contained in this class, for fast lookup.
    /// </summary>
    public new class MethodName : Resource.MethodName
    {
        /// <summary>
        /// Cached name for the '_set_user_data' method.
        /// </summary>
        public static readonly StringName _SetUserData = "_set_user_data";
        /// <summary>
        /// Cached name for the '_get_user_data' method.
        /// </summary>
        public static readonly StringName _GetUserData = "_get_user_data";
        /// <summary>
        /// Cached name for the 'set_lightmap_textures' method.
        /// </summary>
        public static readonly StringName SetLightmapTextures = "set_lightmap_textures";
        /// <summary>
        /// Cached name for the 'get_lightmap_textures' method.
        /// </summary>
        public static readonly StringName GetLightmapTextures = "get_lightmap_textures";
        /// <summary>
        /// Cached name for the 'set_uses_spherical_harmonics' method.
        /// </summary>
        public static readonly StringName SetUsesSphericalHarmonics = "set_uses_spherical_harmonics";
        /// <summary>
        /// Cached name for the 'is_using_spherical_harmonics' method.
        /// </summary>
        public static readonly StringName IsUsingSphericalHarmonics = "is_using_spherical_harmonics";
        /// <summary>
        /// Cached name for the 'add_user' method.
        /// </summary>
        public static readonly StringName AddUser = "add_user";
        /// <summary>
        /// Cached name for the 'get_user_count' method.
        /// </summary>
        public static readonly StringName GetUserCount = "get_user_count";
        /// <summary>
        /// Cached name for the 'get_user_path' method.
        /// </summary>
        public static readonly StringName GetUserPath = "get_user_path";
        /// <summary>
        /// Cached name for the 'clear_users' method.
        /// </summary>
        public static readonly StringName ClearUsers = "clear_users";
        /// <summary>
        /// Cached name for the '_set_probe_data' method.
        /// </summary>
        public static readonly StringName _SetProbeData = "_set_probe_data";
        /// <summary>
        /// Cached name for the '_get_probe_data' method.
        /// </summary>
        public static readonly StringName _GetProbeData = "_get_probe_data";
        /// <summary>
        /// Cached name for the 'set_light_texture' method.
        /// </summary>
        public static readonly StringName SetLightTexture = "set_light_texture";
        /// <summary>
        /// Cached name for the 'get_light_texture' method.
        /// </summary>
        public static readonly StringName GetLightTexture = "get_light_texture";
        /// <summary>
        /// Cached name for the '_set_light_textures_data' method.
        /// </summary>
        public static readonly StringName _SetLightTexturesData = "_set_light_textures_data";
        /// <summary>
        /// Cached name for the '_get_light_textures_data' method.
        /// </summary>
        public static readonly StringName _GetLightTexturesData = "_get_light_textures_data";
    }

    /// <summary>
    /// Cached StringNames for the signals contained in this class, for fast lookup.
    /// </summary>
    public new class SignalName : Resource.SignalName
    {
    }
}
